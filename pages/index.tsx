import fs from "fs";
import classNames from "classnames";
import matter from "gray-matter";
import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { BottomNavContainer, BottomNavAction } from "../src/components";
import Banner from "../src/components/Banner";
import { MarkdownSection } from "../src/components/MarkdownSection";
import SideNav from "../src/components/SideNav";
import SideNavAction from "../src/components/nav/SideNavAction";
import WindowScrollProgres from "../src/components/WindowScrollProgres";
import { SectionContextProvider } from "../src/context/SectionInViewContext";
import useMatchMaxWidth from "../src/hooks/useMatchMaxWidth";
import { CirclePersonIcon, WorkerIcon, ResumeIcon } from "../src/icons";
import Section from "../src/layout/Section";
import { selectElementVisableInBottom } from "../src/utils/activeSectionSelectionStrategies";


export async function getStaticProps() {
  let aboutMeSection;

  try {
    const readFile = fs.readFileSync(`content/aboutme.md`, "utf-8");
    const { data, content } = matter(readFile);
    aboutMeSection = {
      data,
      content,
    };
  } catch (e) {
    console.error(e);
  }

  return {
    props: {
      aboutMeSection,
    },
  };
}

interface HomePageProps {
  aboutMeSection?: {
    data: {
      title: string;
    };
    content: any;
  };
}

const Home: NextPage<HomePageProps> = ({ aboutMeSection }) => {
  const isMobile = useMatchMaxWidth("600px");
  const [activeSectionId, setActiveSectionId] = useState<string>();

  const scroolToViewById = (elementId: string, scroolYOffset = -50) => {
    const element = document.querySelector(`#${elementId}`);

    if (!element) return;

    const y =
      element.getBoundingClientRect().top + window.pageYOffset + scroolYOffset;

    window.scrollTo({ top: y, behavior: "smooth" });
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <WindowScrollProgres />
      <div
        className={classNames("flex", {
          "flex-col": isMobile,
          "flex-row-reverse": !isMobile,
        })}
      >
        <div className="flex-grow">
          <Banner title="Hi I'm Ernest, a web developer" />
          <SectionContextProvider
            selectActiveSection={selectElementVisableInBottom}
            onActiveSectionChange={(sectionId) => setActiveSectionId(sectionId)}
          >
            <div className="p-7 pb-24 overflow-hidden">
              {aboutMeSection && (
                <Section title={aboutMeSection.data.title} name={"AboutMe"}>
                  <MarkdownSection content={aboutMeSection.content} />
                </Section>
              )}
              {aboutMeSection && (
                <Section title={"Projects"} name={"Projects"}>
                  <MarkdownSection content={aboutMeSection.content} />
                </Section>
              )}
              {aboutMeSection && (
                <Section title={"Contact"} name={"Contact"}>
                  <MarkdownSection content={aboutMeSection.content} />
                </Section>
              )}
            </div>
          </SectionContextProvider>
        </div>
        {isMobile ? (
          <BottomNavContainer>
            <BottomNavAction
              icon={<CirclePersonIcon />}
              label="AboutMe"
              isActive={activeSectionId == "AboutMe"}
              action={() => scroolToViewById("AboutMe")}
            />
            <BottomNavAction
              icon={<WorkerIcon />}
              label="Projects"
              isActive={activeSectionId == "Projects"}
              action={() => scroolToViewById("Projects")}
            />
            <BottomNavAction
              icon={<ResumeIcon />}
              label="Contact"
              isActive={activeSectionId == "Contact"}
              action={() => scroolToViewById("Contact")}
            />
          </BottomNavContainer>
        ) : (
          <SideNav>
            <SideNavAction
              label="AboutMe"
              isActive={activeSectionId == "AboutMe"}
              action={() => scroolToViewById("AboutMe")}
            />
            <SideNavAction
              label="Projects"
              isActive={activeSectionId == "Projects"}
              action={() => scroolToViewById("Projects")}
            />
            <SideNavAction
              label="Contact"
              isActive={activeSectionId == "Contact"}
              action={() => scroolToViewById("Contact")}
            />
          </SideNav>
        )}
      </div>
    </div>
  );
};

export default Home;
