import fs from "fs";
import classNames from "classnames";
import matter from "gray-matter";
import type { InferGetServerSidePropsType, NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { SideNav, BottomNav } from "../src/components/navigation";
import Banner from "../src/components/Banner";
import { MarkdownSection } from "../src/components/MarkdownSection";
import WindowScrollProgres from "../src/components/WindowScrollProgres";
import { TrackableSectionContainer } from "../src/components/trackableSection/TrackableSectionContainer";
import useMatchMaxWidth from "../src/hooks/useMatchMaxWidth";
import { CirclePersonIcon, WorkerIcon } from "../src/icons";
import { TrackableSection } from "../src/components/trackableSection/TrackableSection";
import { selectElementVisableInBottom } from "../src/utils/activeSectionSelectionStrategies";
import { scroolIntoViewById } from "../src/utils/scroolIntoViewById";
import { Section } from "../src/components/Section";
import { ContactMeForm } from "../src/components/ContactMeForm";
import { ModalContextProvider } from "../src/context/ModalContext";

export async function getStaticProps() {
  let aboutMeSection;

  try {
    const readFile = fs.readFileSync(`content/aboutme.md`, "utf-8");
    const { data, content } = matter(readFile);
    aboutMeSection = {
      data,
      content,
    };
  } catch (e) {
    console.error(e);
  }

  return {
    props: {
      aboutMeSection,
    },
  };
}

const Home: NextPage<InferGetServerSidePropsType<typeof getStaticProps>> = ({
  aboutMeSection,
}) => {
  const displayMobileNav = useMatchMaxWidth("800px");
  const [activeSectionId, setActiveSectionId] = useState<string | null>();
  const Nav = displayMobileNav ? BottomNav : SideNav;

  return (
    <div>
      <ModalContextProvider>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <WindowScrollProgres />
        <div
          className={classNames("flex", {
            "flex-col": displayMobileNav,
            "flex-row-reverse": !displayMobileNav,
          })}
        >
          <div className="flex-grow">
            <Banner title="Hi I'm Ernest, a web developer" />
            <TrackableSectionContainer
              activeSectionSelectionStrategy={selectElementVisableInBottom}
              onActiveSectionChange={(sectionId) =>
                setActiveSectionId(sectionId)
              }
            >
              <div className="p-7 pb-24 overflow-hidden">
                {aboutMeSection && (
                  <TrackableSection id="AboutMe">
                    <Section title="AboutMe">
                      <MarkdownSection content={aboutMeSection.content} />
                    </Section>
                  </TrackableSection>
                )}
                {aboutMeSection && (
                  <TrackableSection id="Projects">
                    <Section title="Projects">
                      <MarkdownSection content={aboutMeSection.content} />
                    </Section>
                  </TrackableSection>
                )}
                {aboutMeSection && (
                  <TrackableSection id="Contact">
                    <Section title="Contact">
                      <ContactMeForm />
                    </Section>
                  </TrackableSection>
                )}
              </div>
            </TrackableSectionContainer>
          </div>
          <Nav
            actions={[
              {
                icon: <CirclePersonIcon />,
                label: "AboutMe",
                isActive: activeSectionId == "AboutMe",
                action: () => scroolIntoViewById("AboutMe"),
              },
              {
                icon: <WorkerIcon />,
                label: "Projects",
                isActive: activeSectionId == "Projects",
                action: () => scroolIntoViewById("Projects"),
              },
              {
                icon: <CirclePersonIcon />,
                label: "Contact",
                isActive: activeSectionId == "Contact",
                action: () => scroolIntoViewById("Contact"),
              },
            ]}
          ></Nav>
        </div>
      </ModalContextProvider>
    </div>
  );
};

export default Home;
